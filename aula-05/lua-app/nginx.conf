worker_processes 1;
error_log stderr notice;
pid logs/nginx.pid;

env LUA_SECRET;
env MYSQL_HOST;
env MYSQL_PORT;
env MYSQL_USER;
env MYSQL_PASSWORD;
env MYSQL_DATABASE;

events {
	worker_connections 1024;
}

http {
	include mime.types;
	lua_package_path "/opt/app/?.lua;/usr/share/lua/common/?.lua;;";
  resolver local=on;

	init_by_lua_block {
		local lpeg = require("lpeg")
		local socket = require("socket")
	}

	lua_shared_dict prometheus_metrics 10M;
	
	init_worker_by_lua_block {
		prometheus = require("prometheus").init("prometheus_metrics")
		
		metric_requests = prometheus:counter(
		"nginx_http_requests_total", "Number of HTTP requests", {"host", "status"})
		metric_latency = prometheus:histogram(
		"nginx_http_request_duration_seconds", "HTTP request latency", {"host"})
		metric_connections = prometheus:gauge(
		"nginx_http_connections", "Number of HTTP connections", {"state"})
		metric_bytes = prometheus:counter(
		"nginx_http_request_size_bytes", "Total size of incoming requests")
		metric_response_sizes = prometheus:histogram(
		"nginx_http_response_size_bytes", "Size of HTTP responses", nil, {10,100,1000,10000,100000,1000000})
	}

	log_by_lua_block {
		metric_requests:inc(1, {ngx.var.server_name, ngx.var.status})
		metric_latency:observe(tonumber(ngx.var.request_time), {ngx.var.server_name})
		metric_latency:observe(tonumber(ngx.var.request_time), {ngx.var.server_name})
		metric_response_sizes:observe(tonumber(ngx.var.bytes_sent))
	}

  # code cache habilitado por necessidade do /metrics
	server {
		listen 8080;
		root /opt/app;
    lua_code_cache on;

		location / {
			default_type text/html;
			content_by_lua_block {
				require("lapis").serve("app")
			}
		}

		location /static {
		}

    location /metrics {
			content_by_lua_block {
			  metric_connections:set(ngx.var.connections_reading, {"reading"})
			  metric_connections:set(ngx.var.connections_waiting, {"waiting"})
			  metric_connections:set(ngx.var.connections_writing, {"writing"})
			  prometheus:collect()
			}
		}
	}
}
